version: "3.8"

services:
  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - web
      - authen_and_post
      - newsfeed
    networks:
      - intranet
    restart: unless-stopped

  web:
    build:
      context: .
      dockerfile: cmd/web_app/Dockerfile
      target: test_env
    image: web_app
    expose:
      - "8000"
    depends_on:
      - authen_and_post
      - newsfeed
    networks:
      - intranet
    hostname: webapp
    restart: unless-stopped

  authen_and_post:
    build:
      context: .
      dockerfile: cmd/authen_and_post_service/Dockerfile
      target: test_env
    image: authen_and_post_service
    expose:
      - "8001"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - intranet
    hostname: aap
    restart: unless-stopped

  newsfeed:
    build:
      context: .
      dockerfile: cmd/newsfeed_service/Dockerfile
      target: test_env
    image: newsfeed_service
    expose:
      - "8002"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - intranet
    hostname: nfs
    restart: unless-stopped

  mysql:
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: mysql-db
      MYSQL_DATABASE: social_media_app_db
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    networks:
      - intranet
    hostname: mysql
    restart: always

  redis:
    image: redis:latest
    expose:
      - "6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 5s
      retries: 3
    networks:
      - intranet
    hostname: redis
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: minio #Access Key
      MINIO_ROOT_PASSWORD: miniostorage #Secret Key
    ports:
      - "9000:9000"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      timeout: 20s
      retries: 10
    networks:
      - intranet
    hostname: minio
    restart: always

  kafka:
    image: confluentinc/cp-kafka:latest
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test:
        ["CMD", "kafka-topics", "--list", "--bootstrap-server", "kafka:9092"]
      timeout: 20s
      retries: 10
    networks:
      - intranet
    hostname: kafka
    restart: always

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      timeout: 10s
      retries: 5
    networks:
      - intranet
    hostname: zookeeper
    restart: always

volumes:
  mysql_data:
  minio_data:

networks:
  intranet: {}
  default: {}
